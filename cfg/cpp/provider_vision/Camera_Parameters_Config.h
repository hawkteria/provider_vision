//#line 2 "/opt/ros/melodic/share/dynamic_reconfigure/templates/ConfigType.h.template"
// *********************************************************
//
// File autogenerated for the provider_vision package
// by the dynamic_reconfigure package.
// Please do not edit.
//
// ********************************************************/

#ifndef __provider_vision__CAMERA_PARAMETERS_CONFIG_H__
#define __provider_vision__CAMERA_PARAMETERS_CONFIG_H__

#if __cplusplus >= 201103L
#define DYNAMIC_RECONFIGURE_FINAL final
#else
#define DYNAMIC_RECONFIGURE_FINAL
#endif

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace provider_vision
{
  class Camera_Parameters_ConfigStatics;

  class Camera_Parameters_Config
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l,
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }

      virtual void clamp(Camera_Parameters_Config &config, const Camera_Parameters_Config &max, const Camera_Parameters_Config &min) const = 0;
      virtual void calcLevel(uint32_t &level, const Camera_Parameters_Config &config1, const Camera_Parameters_Config &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, Camera_Parameters_Config &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const Camera_Parameters_Config &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, Camera_Parameters_Config &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const Camera_Parameters_Config &config) const = 0;
      virtual void getValue(const Camera_Parameters_Config &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template <class T>
    class ParamDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level,
          std::string a_description, std::string a_edit_method, T Camera_Parameters_Config::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T (Camera_Parameters_Config::* field);

      virtual void clamp(Camera_Parameters_Config &config, const Camera_Parameters_Config &max, const Camera_Parameters_Config &min) const
      {
        if (config.*field > max.*field)
          config.*field = max.*field;

        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const Camera_Parameters_Config &config1, const Camera_Parameters_Config &config2) const
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, Camera_Parameters_Config &config) const
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const Camera_Parameters_Config &config) const
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, Camera_Parameters_Config &config) const
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const Camera_Parameters_Config &config) const
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const Camera_Parameters_Config &config, boost::any &val) const
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, Camera_Parameters_Config &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template<class T, class PT>
    class GroupDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, Camera_Parameters_Config &top) const
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T (PT::* field);
      std::vector<Camera_Parameters_Config::AbstractGroupDescriptionConstPtr> groups;
    };

class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(Camera_Parameters_Config &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);


      }
    }

    

    bool state;
    std::string name;

    class FRONT_GIGE
{
  public:
    FRONT_GIGE()
    {
      state = true;
      name = "Front_GigE";
    }

    void setParams(Camera_Parameters_Config &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("Front_GigE_gain_auto"==(*_i)->name){Front_GigE_gain_auto = boost::any_cast<bool>(val);}
        if("Front_GigE_gain"==(*_i)->name){Front_GigE_gain = boost::any_cast<double>(val);}
        if("Front_GigE_exposure_auto"==(*_i)->name){Front_GigE_exposure_auto = boost::any_cast<bool>(val);}
        if("Front_GigE_exposure"==(*_i)->name){Front_GigE_exposure = boost::any_cast<double>(val);}
        if("Front_GigE_white_balance_red"==(*_i)->name){Front_GigE_white_balance_red = boost::any_cast<double>(val);}
        if("Front_GigE_white_balance_blue"==(*_i)->name){Front_GigE_white_balance_blue = boost::any_cast<double>(val);}
        if("Front_GigE_white_balance_green"==(*_i)->name){Front_GigE_white_balance_green = boost::any_cast<double>(val);}
        if("Front_GigE_auto_brightness_auto"==(*_i)->name){Front_GigE_auto_brightness_auto = boost::any_cast<bool>(val);}
        if("Front_GigE_auto_brightness_target"==(*_i)->name){Front_GigE_auto_brightness_target = boost::any_cast<int>(val);}
        if("Front_GigE_auto_brightness_variation"==(*_i)->name){Front_GigE_auto_brightness_variation = boost::any_cast<int>(val);}
        if("Front_GigE_white_balance_execute"==(*_i)->name){Front_GigE_white_balance_execute = boost::any_cast<bool>(val);}
      }
    }

    bool Front_GigE_gain_auto;
double Front_GigE_gain;
bool Front_GigE_exposure_auto;
double Front_GigE_exposure;
double Front_GigE_white_balance_red;
double Front_GigE_white_balance_blue;
double Front_GigE_white_balance_green;
bool Front_GigE_auto_brightness_auto;
int Front_GigE_auto_brightness_target;
int Front_GigE_auto_brightness_variation;
bool Front_GigE_white_balance_execute;

    bool state;
    std::string name;

    
}front_gige;

class BOTTOM_GIGE
{
  public:
    BOTTOM_GIGE()
    {
      state = true;
      name = "Bottom_GigE";
    }

    void setParams(Camera_Parameters_Config &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("Bottom_GigE_gain_auto"==(*_i)->name){Bottom_GigE_gain_auto = boost::any_cast<bool>(val);}
        if("Bottom_GigE_gain"==(*_i)->name){Bottom_GigE_gain = boost::any_cast<double>(val);}
        if("Bottom_GigE_exposure_auto"==(*_i)->name){Bottom_GigE_exposure_auto = boost::any_cast<bool>(val);}
        if("Bottom_GigE_exposure"==(*_i)->name){Bottom_GigE_exposure = boost::any_cast<double>(val);}
        if("Bottom_GigE_white_balance_red"==(*_i)->name){Bottom_GigE_white_balance_red = boost::any_cast<double>(val);}
        if("Bottom_GigE_white_balance_blue"==(*_i)->name){Bottom_GigE_white_balance_blue = boost::any_cast<double>(val);}
        if("Bottom_GigE_white_balance_green"==(*_i)->name){Bottom_GigE_white_balance_green = boost::any_cast<double>(val);}
        if("Bottom_GigE_auto_brightness_auto"==(*_i)->name){Bottom_GigE_auto_brightness_auto = boost::any_cast<bool>(val);}
        if("Bottom_GigE_auto_brightness_target"==(*_i)->name){Bottom_GigE_auto_brightness_target = boost::any_cast<int>(val);}
        if("Bottom_GigE_auto_brightness_variation"==(*_i)->name){Bottom_GigE_auto_brightness_variation = boost::any_cast<int>(val);}
        if("Bottom_GigE_white_balance_execute"==(*_i)->name){Bottom_GigE_white_balance_execute = boost::any_cast<bool>(val);}
      }
    }

    bool Bottom_GigE_gain_auto;
double Bottom_GigE_gain;
bool Bottom_GigE_exposure_auto;
double Bottom_GigE_exposure;
double Bottom_GigE_white_balance_red;
double Bottom_GigE_white_balance_blue;
double Bottom_GigE_white_balance_green;
bool Bottom_GigE_auto_brightness_auto;
int Bottom_GigE_auto_brightness_target;
int Bottom_GigE_auto_brightness_variation;
bool Bottom_GigE_white_balance_execute;

    bool state;
    std::string name;

    
}bottom_gige;

class FRONT_GUPPY
{
  public:
    FRONT_GUPPY()
    {
      state = true;
      name = "front_guppy";
    }

    void setParams(Camera_Parameters_Config &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("front_guppy_gain_auto"==(*_i)->name){front_guppy_gain_auto = boost::any_cast<bool>(val);}
        if("front_guppy_gain"==(*_i)->name){front_guppy_gain = boost::any_cast<double>(val);}
        if("front_guppy_exposure_auto"==(*_i)->name){front_guppy_exposure_auto = boost::any_cast<bool>(val);}
        if("front_guppy_exposure"==(*_i)->name){front_guppy_exposure = boost::any_cast<double>(val);}
        if("front_guppy_shutter_auto"==(*_i)->name){front_guppy_shutter_auto = boost::any_cast<bool>(val);}
        if("front_guppy_shutter"==(*_i)->name){front_guppy_shutter = boost::any_cast<double>(val);}
        if("front_guppy_white_balance_auto"==(*_i)->name){front_guppy_white_balance_auto = boost::any_cast<bool>(val);}
        if("front_guppy_white_balance_red"==(*_i)->name){front_guppy_white_balance_red = boost::any_cast<double>(val);}
        if("front_guppy_white_balance_blue"==(*_i)->name){front_guppy_white_balance_blue = boost::any_cast<double>(val);}
      }
    }

    bool front_guppy_gain_auto;
double front_guppy_gain;
bool front_guppy_exposure_auto;
double front_guppy_exposure;
bool front_guppy_shutter_auto;
double front_guppy_shutter;
bool front_guppy_white_balance_auto;
double front_guppy_white_balance_red;
double front_guppy_white_balance_blue;

    bool state;
    std::string name;

    
}front_guppy;

class BOTTOM_GUPPY
{
  public:
    BOTTOM_GUPPY()
    {
      state = true;
      name = "bottom_guppy";
    }

    void setParams(Camera_Parameters_Config &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("bottom_guppy_gain_auto"==(*_i)->name){bottom_guppy_gain_auto = boost::any_cast<bool>(val);}
        if("bottom_guppy_gain"==(*_i)->name){bottom_guppy_gain = boost::any_cast<double>(val);}
        if("bottom_guppy_exposure_auto"==(*_i)->name){bottom_guppy_exposure_auto = boost::any_cast<bool>(val);}
        if("bottom_guppy_exposure"==(*_i)->name){bottom_guppy_exposure = boost::any_cast<double>(val);}
        if("bottom_guppy_shutter_auto"==(*_i)->name){bottom_guppy_shutter_auto = boost::any_cast<bool>(val);}
        if("bottom_guppy_shutter"==(*_i)->name){bottom_guppy_shutter = boost::any_cast<double>(val);}
        if("bottom_guppy_white_balance_auto"==(*_i)->name){bottom_guppy_white_balance_auto = boost::any_cast<bool>(val);}
        if("bottom_guppy_white_balance_red"==(*_i)->name){bottom_guppy_white_balance_red = boost::any_cast<double>(val);}
        if("bottom_guppy_white_balance_blue"==(*_i)->name){bottom_guppy_white_balance_blue = boost::any_cast<double>(val);}
      }
    }

    bool bottom_guppy_gain_auto;
double bottom_guppy_gain;
bool bottom_guppy_exposure_auto;
double bottom_guppy_exposure;
bool bottom_guppy_shutter_auto;
double bottom_guppy_shutter;
bool bottom_guppy_white_balance_auto;
double bottom_guppy_white_balance_red;
double bottom_guppy_white_balance_blue;

    bool state;
    std::string name;

    
}bottom_guppy;

}groups;



//#line 9 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      bool Front_GigE_gain_auto;
//#line 10 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      double Front_GigE_gain;
//#line 12 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      bool Front_GigE_exposure_auto;
//#line 13 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      double Front_GigE_exposure;
//#line 19 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      double Front_GigE_white_balance_red;
//#line 20 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      double Front_GigE_white_balance_blue;
//#line 21 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      double Front_GigE_white_balance_green;
//#line 22 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      bool Front_GigE_auto_brightness_auto;
//#line 23 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      int Front_GigE_auto_brightness_target;
//#line 24 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      int Front_GigE_auto_brightness_variation;
//#line 30 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      bool Front_GigE_white_balance_execute;
//#line 34 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      bool Bottom_GigE_gain_auto;
//#line 35 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      double Bottom_GigE_gain;
//#line 37 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      bool Bottom_GigE_exposure_auto;
//#line 38 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      double Bottom_GigE_exposure;
//#line 44 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      double Bottom_GigE_white_balance_red;
//#line 45 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      double Bottom_GigE_white_balance_blue;
//#line 46 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      double Bottom_GigE_white_balance_green;
//#line 47 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      bool Bottom_GigE_auto_brightness_auto;
//#line 48 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      int Bottom_GigE_auto_brightness_target;
//#line 49 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      int Bottom_GigE_auto_brightness_variation;
//#line 55 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      bool Bottom_GigE_white_balance_execute;
//#line 81 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      bool front_guppy_gain_auto;
//#line 82 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      double front_guppy_gain;
//#line 84 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      bool front_guppy_exposure_auto;
//#line 85 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      double front_guppy_exposure;
//#line 87 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      bool front_guppy_shutter_auto;
//#line 88 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      double front_guppy_shutter;
//#line 90 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      bool front_guppy_white_balance_auto;
//#line 91 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      double front_guppy_white_balance_red;
//#line 92 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      double front_guppy_white_balance_blue;
//#line 95 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      bool bottom_guppy_gain_auto;
//#line 96 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      double bottom_guppy_gain;
//#line 98 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      bool bottom_guppy_exposure_auto;
//#line 99 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      double bottom_guppy_exposure;
//#line 101 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      bool bottom_guppy_shutter_auto;
//#line 102 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      double bottom_guppy_shutter;
//#line 104 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      bool bottom_guppy_white_balance_auto;
//#line 105 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      double bottom_guppy_white_balance_red;
//#line 106 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      double bottom_guppy_white_balance_blue;
//#line 228 "/opt/ros/melodic/share/dynamic_reconfigure/templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("Camera_Parameters_Config::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }

    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }

    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const Camera_Parameters_Config &__max__ = __getMax__();
      const Camera_Parameters_Config &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const Camera_Parameters_Config &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }

    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const Camera_Parameters_Config &__getDefault__();
    static const Camera_Parameters_Config &__getMax__();
    static const Camera_Parameters_Config &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();

  private:
    static const Camera_Parameters_ConfigStatics *__get_statics__();
  };

  template <> // Max and min are ignored for strings.
  inline void Camera_Parameters_Config::ParamDescription<std::string>::clamp(Camera_Parameters_Config &config, const Camera_Parameters_Config &max, const Camera_Parameters_Config &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class Camera_Parameters_ConfigStatics
  {
    friend class Camera_Parameters_Config;

    Camera_Parameters_ConfigStatics()
    {
Camera_Parameters_Config::GroupDescription<Camera_Parameters_Config::DEFAULT, Camera_Parameters_Config> Default("Default", "", 0, 0, true, &Camera_Parameters_Config::groups);
Camera_Parameters_Config::GroupDescription<Camera_Parameters_Config::DEFAULT::FRONT_GIGE, Camera_Parameters_Config::DEFAULT> Front_GigE("Front_GigE", "", 0, 1, true, &Camera_Parameters_Config::DEFAULT::front_gige);
//#line 9 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __min__.Front_GigE_gain_auto = 0;
//#line 9 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __max__.Front_GigE_gain_auto = 1;
//#line 9 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __default__.Front_GigE_gain_auto = 1;
//#line 9 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      Front_GigE.abstract_parameters.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<bool>("Front_GigE_gain_auto", "bool", 101, "True = Auto, False = Manual ", "", &Camera_Parameters_Config::Front_GigE_gain_auto)));
//#line 9 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __param_descriptions__.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<bool>("Front_GigE_gain_auto", "bool", 101, "True = Auto, False = Manual ", "", &Camera_Parameters_Config::Front_GigE_gain_auto)));
//#line 10 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __min__.Front_GigE_gain = 1.0;
//#line 10 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __max__.Front_GigE_gain = 8.0;
//#line 10 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __default__.Front_GigE_gain = 1.0;
//#line 10 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      Front_GigE.abstract_parameters.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<double>("Front_GigE_gain", "double", 102, "Value for the gain", "", &Camera_Parameters_Config::Front_GigE_gain)));
//#line 10 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __param_descriptions__.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<double>("Front_GigE_gain", "double", 102, "Value for the gain", "", &Camera_Parameters_Config::Front_GigE_gain)));
//#line 12 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __min__.Front_GigE_exposure_auto = 0;
//#line 12 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __max__.Front_GigE_exposure_auto = 1;
//#line 12 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __default__.Front_GigE_exposure_auto = 0;
//#line 12 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      Front_GigE.abstract_parameters.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<bool>("Front_GigE_exposure_auto", "bool", 104, "True = Auto, False = Manual", "", &Camera_Parameters_Config::Front_GigE_exposure_auto)));
//#line 12 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __param_descriptions__.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<bool>("Front_GigE_exposure_auto", "bool", 104, "True = Auto, False = Manual", "", &Camera_Parameters_Config::Front_GigE_exposure_auto)));
//#line 13 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __min__.Front_GigE_exposure = 10.0;
//#line 13 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __max__.Front_GigE_exposure = 100000.0;
//#line 13 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __default__.Front_GigE_exposure = 1000.0;
//#line 13 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      Front_GigE.abstract_parameters.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<double>("Front_GigE_exposure", "double", 105, "Value for the exposure", "", &Camera_Parameters_Config::Front_GigE_exposure)));
//#line 13 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __param_descriptions__.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<double>("Front_GigE_exposure", "double", 105, "Value for the exposure", "", &Camera_Parameters_Config::Front_GigE_exposure)));
//#line 19 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __min__.Front_GigE_white_balance_red = 1.0;
//#line 19 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __max__.Front_GigE_white_balance_red = 4.0;
//#line 19 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __default__.Front_GigE_white_balance_red = 1.0;
//#line 19 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      Front_GigE.abstract_parameters.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<double>("Front_GigE_white_balance_red", "double", 111, "Value for the red in the white balance", "", &Camera_Parameters_Config::Front_GigE_white_balance_red)));
//#line 19 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __param_descriptions__.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<double>("Front_GigE_white_balance_red", "double", 111, "Value for the red in the white balance", "", &Camera_Parameters_Config::Front_GigE_white_balance_red)));
//#line 20 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __min__.Front_GigE_white_balance_blue = 1.0;
//#line 20 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __max__.Front_GigE_white_balance_blue = 4.0;
//#line 20 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __default__.Front_GigE_white_balance_blue = 1.0;
//#line 20 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      Front_GigE.abstract_parameters.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<double>("Front_GigE_white_balance_blue", "double", 112, "Value for the blue in the white balance", "", &Camera_Parameters_Config::Front_GigE_white_balance_blue)));
//#line 20 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __param_descriptions__.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<double>("Front_GigE_white_balance_blue", "double", 112, "Value for the blue in the white balance", "", &Camera_Parameters_Config::Front_GigE_white_balance_blue)));
//#line 21 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __min__.Front_GigE_white_balance_green = 1.0;
//#line 21 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __max__.Front_GigE_white_balance_green = 4.0;
//#line 21 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __default__.Front_GigE_white_balance_green = 1.0;
//#line 21 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      Front_GigE.abstract_parameters.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<double>("Front_GigE_white_balance_green", "double", 122, "Value for the blue in the white balance", "", &Camera_Parameters_Config::Front_GigE_white_balance_green)));
//#line 21 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __param_descriptions__.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<double>("Front_GigE_white_balance_green", "double", 122, "Value for the blue in the white balance", "", &Camera_Parameters_Config::Front_GigE_white_balance_green)));
//#line 22 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __min__.Front_GigE_auto_brightness_auto = 0;
//#line 22 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __max__.Front_GigE_auto_brightness_auto = 1;
//#line 22 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __default__.Front_GigE_auto_brightness_auto = 1;
//#line 22 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      Front_GigE.abstract_parameters.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<bool>("Front_GigE_auto_brightness_auto", "bool", 113, "Value for the auto brightness", "", &Camera_Parameters_Config::Front_GigE_auto_brightness_auto)));
//#line 22 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __param_descriptions__.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<bool>("Front_GigE_auto_brightness_auto", "bool", 113, "Value for the auto brightness", "", &Camera_Parameters_Config::Front_GigE_auto_brightness_auto)));
//#line 23 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __min__.Front_GigE_auto_brightness_target = 50;
//#line 23 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __max__.Front_GigE_auto_brightness_target = 200;
//#line 23 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __default__.Front_GigE_auto_brightness_target = 100;
//#line 23 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      Front_GigE.abstract_parameters.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<int>("Front_GigE_auto_brightness_target", "int", 114, "Value for the target brightness", "", &Camera_Parameters_Config::Front_GigE_auto_brightness_target)));
//#line 23 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __param_descriptions__.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<int>("Front_GigE_auto_brightness_target", "int", 114, "Value for the target brightness", "", &Camera_Parameters_Config::Front_GigE_auto_brightness_target)));
//#line 24 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __min__.Front_GigE_auto_brightness_variation = 10;
//#line 24 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __max__.Front_GigE_auto_brightness_variation = 64;
//#line 24 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __default__.Front_GigE_auto_brightness_variation = 16;
//#line 24 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      Front_GigE.abstract_parameters.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<int>("Front_GigE_auto_brightness_variation", "int", 115, "Value for the variation of the brightness", "", &Camera_Parameters_Config::Front_GigE_auto_brightness_variation)));
//#line 24 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __param_descriptions__.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<int>("Front_GigE_auto_brightness_variation", "int", 115, "Value for the variation of the brightness", "", &Camera_Parameters_Config::Front_GigE_auto_brightness_variation)));
//#line 30 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __min__.Front_GigE_white_balance_execute = 0;
//#line 30 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __max__.Front_GigE_white_balance_execute = 1;
//#line 30 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __default__.Front_GigE_white_balance_execute = 1;
//#line 30 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      Front_GigE.abstract_parameters.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<bool>("Front_GigE_white_balance_execute", "bool", 121, "Executes the white balance.", "", &Camera_Parameters_Config::Front_GigE_white_balance_execute)));
//#line 30 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __param_descriptions__.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<bool>("Front_GigE_white_balance_execute", "bool", 121, "Executes the white balance.", "", &Camera_Parameters_Config::Front_GigE_white_balance_execute)));
//#line 123 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      Front_GigE.convertParams();
//#line 123 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      Default.groups.push_back(Camera_Parameters_Config::AbstractGroupDescriptionConstPtr(new Camera_Parameters_Config::GroupDescription<Camera_Parameters_Config::DEFAULT::FRONT_GIGE, Camera_Parameters_Config::DEFAULT>(Front_GigE)));
//#line 123 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __group_descriptions__.push_back(Camera_Parameters_Config::AbstractGroupDescriptionConstPtr(new Camera_Parameters_Config::GroupDescription<Camera_Parameters_Config::DEFAULT::FRONT_GIGE, Camera_Parameters_Config::DEFAULT>(Front_GigE)));
Camera_Parameters_Config::GroupDescription<Camera_Parameters_Config::DEFAULT::BOTTOM_GIGE, Camera_Parameters_Config::DEFAULT> Bottom_GigE("Bottom_GigE", "", 0, 2, true, &Camera_Parameters_Config::DEFAULT::bottom_gige);
//#line 34 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __min__.Bottom_GigE_gain_auto = 0;
//#line 34 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __max__.Bottom_GigE_gain_auto = 1;
//#line 34 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __default__.Bottom_GigE_gain_auto = 1;
//#line 34 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      Bottom_GigE.abstract_parameters.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<bool>("Bottom_GigE_gain_auto", "bool", 101, "True = Auto, False = Manual ", "", &Camera_Parameters_Config::Bottom_GigE_gain_auto)));
//#line 34 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __param_descriptions__.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<bool>("Bottom_GigE_gain_auto", "bool", 101, "True = Auto, False = Manual ", "", &Camera_Parameters_Config::Bottom_GigE_gain_auto)));
//#line 35 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __min__.Bottom_GigE_gain = 1.0;
//#line 35 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __max__.Bottom_GigE_gain = 8.0;
//#line 35 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __default__.Bottom_GigE_gain = 1.0;
//#line 35 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      Bottom_GigE.abstract_parameters.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<double>("Bottom_GigE_gain", "double", 102, "Value for the gain", "", &Camera_Parameters_Config::Bottom_GigE_gain)));
//#line 35 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __param_descriptions__.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<double>("Bottom_GigE_gain", "double", 102, "Value for the gain", "", &Camera_Parameters_Config::Bottom_GigE_gain)));
//#line 37 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __min__.Bottom_GigE_exposure_auto = 0;
//#line 37 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __max__.Bottom_GigE_exposure_auto = 1;
//#line 37 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __default__.Bottom_GigE_exposure_auto = 0;
//#line 37 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      Bottom_GigE.abstract_parameters.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<bool>("Bottom_GigE_exposure_auto", "bool", 104, "True = Auto, False = Manual", "", &Camera_Parameters_Config::Bottom_GigE_exposure_auto)));
//#line 37 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __param_descriptions__.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<bool>("Bottom_GigE_exposure_auto", "bool", 104, "True = Auto, False = Manual", "", &Camera_Parameters_Config::Bottom_GigE_exposure_auto)));
//#line 38 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __min__.Bottom_GigE_exposure = 10.0;
//#line 38 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __max__.Bottom_GigE_exposure = 100000.0;
//#line 38 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __default__.Bottom_GigE_exposure = 1000.0;
//#line 38 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      Bottom_GigE.abstract_parameters.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<double>("Bottom_GigE_exposure", "double", 105, "Value for the exposure", "", &Camera_Parameters_Config::Bottom_GigE_exposure)));
//#line 38 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __param_descriptions__.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<double>("Bottom_GigE_exposure", "double", 105, "Value for the exposure", "", &Camera_Parameters_Config::Bottom_GigE_exposure)));
//#line 44 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __min__.Bottom_GigE_white_balance_red = 1.0;
//#line 44 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __max__.Bottom_GigE_white_balance_red = 4.0;
//#line 44 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __default__.Bottom_GigE_white_balance_red = 1.0;
//#line 44 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      Bottom_GigE.abstract_parameters.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<double>("Bottom_GigE_white_balance_red", "double", 111, "Value for the red in the white balance", "", &Camera_Parameters_Config::Bottom_GigE_white_balance_red)));
//#line 44 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __param_descriptions__.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<double>("Bottom_GigE_white_balance_red", "double", 111, "Value for the red in the white balance", "", &Camera_Parameters_Config::Bottom_GigE_white_balance_red)));
//#line 45 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __min__.Bottom_GigE_white_balance_blue = 1.0;
//#line 45 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __max__.Bottom_GigE_white_balance_blue = 4.0;
//#line 45 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __default__.Bottom_GigE_white_balance_blue = 1.0;
//#line 45 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      Bottom_GigE.abstract_parameters.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<double>("Bottom_GigE_white_balance_blue", "double", 112, "Value for the blue in the white balance", "", &Camera_Parameters_Config::Bottom_GigE_white_balance_blue)));
//#line 45 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __param_descriptions__.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<double>("Bottom_GigE_white_balance_blue", "double", 112, "Value for the blue in the white balance", "", &Camera_Parameters_Config::Bottom_GigE_white_balance_blue)));
//#line 46 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __min__.Bottom_GigE_white_balance_green = 1.0;
//#line 46 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __max__.Bottom_GigE_white_balance_green = 4.0;
//#line 46 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __default__.Bottom_GigE_white_balance_green = 1.0;
//#line 46 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      Bottom_GigE.abstract_parameters.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<double>("Bottom_GigE_white_balance_green", "double", 122, "Value for the blue in the white balance", "", &Camera_Parameters_Config::Bottom_GigE_white_balance_green)));
//#line 46 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __param_descriptions__.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<double>("Bottom_GigE_white_balance_green", "double", 122, "Value for the blue in the white balance", "", &Camera_Parameters_Config::Bottom_GigE_white_balance_green)));
//#line 47 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __min__.Bottom_GigE_auto_brightness_auto = 0;
//#line 47 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __max__.Bottom_GigE_auto_brightness_auto = 1;
//#line 47 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __default__.Bottom_GigE_auto_brightness_auto = 1;
//#line 47 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      Bottom_GigE.abstract_parameters.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<bool>("Bottom_GigE_auto_brightness_auto", "bool", 113, "Value for the auto brightness", "", &Camera_Parameters_Config::Bottom_GigE_auto_brightness_auto)));
//#line 47 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __param_descriptions__.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<bool>("Bottom_GigE_auto_brightness_auto", "bool", 113, "Value for the auto brightness", "", &Camera_Parameters_Config::Bottom_GigE_auto_brightness_auto)));
//#line 48 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __min__.Bottom_GigE_auto_brightness_target = 50;
//#line 48 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __max__.Bottom_GigE_auto_brightness_target = 200;
//#line 48 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __default__.Bottom_GigE_auto_brightness_target = 100;
//#line 48 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      Bottom_GigE.abstract_parameters.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<int>("Bottom_GigE_auto_brightness_target", "int", 114, "Value for the target brightness", "", &Camera_Parameters_Config::Bottom_GigE_auto_brightness_target)));
//#line 48 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __param_descriptions__.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<int>("Bottom_GigE_auto_brightness_target", "int", 114, "Value for the target brightness", "", &Camera_Parameters_Config::Bottom_GigE_auto_brightness_target)));
//#line 49 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __min__.Bottom_GigE_auto_brightness_variation = 10;
//#line 49 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __max__.Bottom_GigE_auto_brightness_variation = 64;
//#line 49 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __default__.Bottom_GigE_auto_brightness_variation = 16;
//#line 49 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      Bottom_GigE.abstract_parameters.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<int>("Bottom_GigE_auto_brightness_variation", "int", 115, "Value for the variation of the brightness", "", &Camera_Parameters_Config::Bottom_GigE_auto_brightness_variation)));
//#line 49 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __param_descriptions__.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<int>("Bottom_GigE_auto_brightness_variation", "int", 115, "Value for the variation of the brightness", "", &Camera_Parameters_Config::Bottom_GigE_auto_brightness_variation)));
//#line 55 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __min__.Bottom_GigE_white_balance_execute = 0;
//#line 55 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __max__.Bottom_GigE_white_balance_execute = 1;
//#line 55 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __default__.Bottom_GigE_white_balance_execute = 1;
//#line 55 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      Bottom_GigE.abstract_parameters.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<bool>("Bottom_GigE_white_balance_execute", "bool", 121, "Executes the white balance.", "", &Camera_Parameters_Config::Bottom_GigE_white_balance_execute)));
//#line 55 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __param_descriptions__.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<bool>("Bottom_GigE_white_balance_execute", "bool", 121, "Executes the white balance.", "", &Camera_Parameters_Config::Bottom_GigE_white_balance_execute)));
//#line 123 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      Bottom_GigE.convertParams();
//#line 123 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      Default.groups.push_back(Camera_Parameters_Config::AbstractGroupDescriptionConstPtr(new Camera_Parameters_Config::GroupDescription<Camera_Parameters_Config::DEFAULT::BOTTOM_GIGE, Camera_Parameters_Config::DEFAULT>(Bottom_GigE)));
//#line 123 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __group_descriptions__.push_back(Camera_Parameters_Config::AbstractGroupDescriptionConstPtr(new Camera_Parameters_Config::GroupDescription<Camera_Parameters_Config::DEFAULT::BOTTOM_GIGE, Camera_Parameters_Config::DEFAULT>(Bottom_GigE)));
Camera_Parameters_Config::GroupDescription<Camera_Parameters_Config::DEFAULT::FRONT_GUPPY, Camera_Parameters_Config::DEFAULT> front_guppy("front_guppy", "", 0, 3, true, &Camera_Parameters_Config::DEFAULT::front_guppy);
//#line 81 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __min__.front_guppy_gain_auto = 0;
//#line 81 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __max__.front_guppy_gain_auto = 1;
//#line 81 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __default__.front_guppy_gain_auto = 1;
//#line 81 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      front_guppy.abstract_parameters.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<bool>("front_guppy_gain_auto", "bool", 301, "True = Manual, False = Auto ", "", &Camera_Parameters_Config::front_guppy_gain_auto)));
//#line 81 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __param_descriptions__.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<bool>("front_guppy_gain_auto", "bool", 301, "True = Manual, False = Auto ", "", &Camera_Parameters_Config::front_guppy_gain_auto)));
//#line 82 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __min__.front_guppy_gain = 0.0;
//#line 82 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __max__.front_guppy_gain = 680.0;
//#line 82 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __default__.front_guppy_gain = 1.0;
//#line 82 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      front_guppy.abstract_parameters.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<double>("front_guppy_gain", "double", 302, "Value for the gain", "", &Camera_Parameters_Config::front_guppy_gain)));
//#line 82 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __param_descriptions__.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<double>("front_guppy_gain", "double", 302, "Value for the gain", "", &Camera_Parameters_Config::front_guppy_gain)));
//#line 84 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __min__.front_guppy_exposure_auto = 0;
//#line 84 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __max__.front_guppy_exposure_auto = 1;
//#line 84 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __default__.front_guppy_exposure_auto = 0;
//#line 84 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      front_guppy.abstract_parameters.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<bool>("front_guppy_exposure_auto", "bool", 304, "True = Manual, False = Auto", "", &Camera_Parameters_Config::front_guppy_exposure_auto)));
//#line 84 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __param_descriptions__.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<bool>("front_guppy_exposure_auto", "bool", 304, "True = Manual, False = Auto", "", &Camera_Parameters_Config::front_guppy_exposure_auto)));
//#line 85 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __min__.front_guppy_exposure = 50.0;
//#line 85 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __max__.front_guppy_exposure = 205.0;
//#line 85 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __default__.front_guppy_exposure = 100.0;
//#line 85 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      front_guppy.abstract_parameters.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<double>("front_guppy_exposure", "double", 305, "Value for the exposure", "", &Camera_Parameters_Config::front_guppy_exposure)));
//#line 85 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __param_descriptions__.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<double>("front_guppy_exposure", "double", 305, "Value for the exposure", "", &Camera_Parameters_Config::front_guppy_exposure)));
//#line 87 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __min__.front_guppy_shutter_auto = 0;
//#line 87 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __max__.front_guppy_shutter_auto = 1;
//#line 87 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __default__.front_guppy_shutter_auto = 0;
//#line 87 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      front_guppy.abstract_parameters.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<bool>("front_guppy_shutter_auto", "bool", 307, "True = Manual, False = Auto ", "", &Camera_Parameters_Config::front_guppy_shutter_auto)));
//#line 87 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __param_descriptions__.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<bool>("front_guppy_shutter_auto", "bool", 307, "True = Manual, False = Auto ", "", &Camera_Parameters_Config::front_guppy_shutter_auto)));
//#line 88 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __min__.front_guppy_shutter = 1.0;
//#line 88 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __max__.front_guppy_shutter = 4095.0;
//#line 88 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __default__.front_guppy_shutter = 500.0;
//#line 88 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      front_guppy.abstract_parameters.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<double>("front_guppy_shutter", "double", 308, "Value for the shutter", "", &Camera_Parameters_Config::front_guppy_shutter)));
//#line 88 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __param_descriptions__.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<double>("front_guppy_shutter", "double", 308, "Value for the shutter", "", &Camera_Parameters_Config::front_guppy_shutter)));
//#line 90 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __min__.front_guppy_white_balance_auto = 0;
//#line 90 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __max__.front_guppy_white_balance_auto = 1;
//#line 90 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __default__.front_guppy_white_balance_auto = 1;
//#line 90 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      front_guppy.abstract_parameters.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<bool>("front_guppy_white_balance_auto", "bool", 310, "True = Manual , False = Auto", "", &Camera_Parameters_Config::front_guppy_white_balance_auto)));
//#line 90 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __param_descriptions__.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<bool>("front_guppy_white_balance_auto", "bool", 310, "True = Manual , False = Auto", "", &Camera_Parameters_Config::front_guppy_white_balance_auto)));
//#line 91 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __min__.front_guppy_white_balance_red = 0.0;
//#line 91 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __max__.front_guppy_white_balance_red = 568.0;
//#line 91 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __default__.front_guppy_white_balance_red = 568.0;
//#line 91 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      front_guppy.abstract_parameters.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<double>("front_guppy_white_balance_red", "double", 311, "Value for the red in the white balance", "", &Camera_Parameters_Config::front_guppy_white_balance_red)));
//#line 91 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __param_descriptions__.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<double>("front_guppy_white_balance_red", "double", 311, "Value for the red in the white balance", "", &Camera_Parameters_Config::front_guppy_white_balance_red)));
//#line 92 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __min__.front_guppy_white_balance_blue = 0.0;
//#line 92 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __max__.front_guppy_white_balance_blue = 568.0;
//#line 92 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __default__.front_guppy_white_balance_blue = 276.0;
//#line 92 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      front_guppy.abstract_parameters.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<double>("front_guppy_white_balance_blue", "double", 312, "Value for the blue in the white balance", "", &Camera_Parameters_Config::front_guppy_white_balance_blue)));
//#line 92 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __param_descriptions__.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<double>("front_guppy_white_balance_blue", "double", 312, "Value for the blue in the white balance", "", &Camera_Parameters_Config::front_guppy_white_balance_blue)));
//#line 123 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      front_guppy.convertParams();
//#line 123 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      Default.groups.push_back(Camera_Parameters_Config::AbstractGroupDescriptionConstPtr(new Camera_Parameters_Config::GroupDescription<Camera_Parameters_Config::DEFAULT::FRONT_GUPPY, Camera_Parameters_Config::DEFAULT>(front_guppy)));
//#line 123 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __group_descriptions__.push_back(Camera_Parameters_Config::AbstractGroupDescriptionConstPtr(new Camera_Parameters_Config::GroupDescription<Camera_Parameters_Config::DEFAULT::FRONT_GUPPY, Camera_Parameters_Config::DEFAULT>(front_guppy)));
Camera_Parameters_Config::GroupDescription<Camera_Parameters_Config::DEFAULT::BOTTOM_GUPPY, Camera_Parameters_Config::DEFAULT> bottom_guppy("bottom_guppy", "", 0, 4, true, &Camera_Parameters_Config::DEFAULT::bottom_guppy);
//#line 95 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __min__.bottom_guppy_gain_auto = 0;
//#line 95 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __max__.bottom_guppy_gain_auto = 1;
//#line 95 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __default__.bottom_guppy_gain_auto = 1;
//#line 95 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      bottom_guppy.abstract_parameters.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<bool>("bottom_guppy_gain_auto", "bool", 401, "True = Manual, False = Auto ", "", &Camera_Parameters_Config::bottom_guppy_gain_auto)));
//#line 95 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __param_descriptions__.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<bool>("bottom_guppy_gain_auto", "bool", 401, "True = Manual, False = Auto ", "", &Camera_Parameters_Config::bottom_guppy_gain_auto)));
//#line 96 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __min__.bottom_guppy_gain = 0.0;
//#line 96 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __max__.bottom_guppy_gain = 511.0;
//#line 96 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __default__.bottom_guppy_gain = 1.0;
//#line 96 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      bottom_guppy.abstract_parameters.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<double>("bottom_guppy_gain", "double", 402, "Value for the gain", "", &Camera_Parameters_Config::bottom_guppy_gain)));
//#line 96 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __param_descriptions__.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<double>("bottom_guppy_gain", "double", 402, "Value for the gain", "", &Camera_Parameters_Config::bottom_guppy_gain)));
//#line 98 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __min__.bottom_guppy_exposure_auto = 0;
//#line 98 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __max__.bottom_guppy_exposure_auto = 1;
//#line 98 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __default__.bottom_guppy_exposure_auto = 0;
//#line 98 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      bottom_guppy.abstract_parameters.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<bool>("bottom_guppy_exposure_auto", "bool", 404, "True = Manual, False = Auto", "", &Camera_Parameters_Config::bottom_guppy_exposure_auto)));
//#line 98 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __param_descriptions__.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<bool>("bottom_guppy_exposure_auto", "bool", 404, "True = Manual, False = Auto", "", &Camera_Parameters_Config::bottom_guppy_exposure_auto)));
//#line 99 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __min__.bottom_guppy_exposure = 0.0;
//#line 99 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __max__.bottom_guppy_exposure = 100.0;
//#line 99 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __default__.bottom_guppy_exposure = 100.0;
//#line 99 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      bottom_guppy.abstract_parameters.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<double>("bottom_guppy_exposure", "double", 405, "Value for the exposure", "", &Camera_Parameters_Config::bottom_guppy_exposure)));
//#line 99 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __param_descriptions__.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<double>("bottom_guppy_exposure", "double", 405, "Value for the exposure", "", &Camera_Parameters_Config::bottom_guppy_exposure)));
//#line 101 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __min__.bottom_guppy_shutter_auto = 0;
//#line 101 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __max__.bottom_guppy_shutter_auto = 1;
//#line 101 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __default__.bottom_guppy_shutter_auto = 0;
//#line 101 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      bottom_guppy.abstract_parameters.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<bool>("bottom_guppy_shutter_auto", "bool", 407, "True = Manual, False = Auto ", "", &Camera_Parameters_Config::bottom_guppy_shutter_auto)));
//#line 101 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __param_descriptions__.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<bool>("bottom_guppy_shutter_auto", "bool", 407, "True = Manual, False = Auto ", "", &Camera_Parameters_Config::bottom_guppy_shutter_auto)));
//#line 102 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __min__.bottom_guppy_shutter = 1.0;
//#line 102 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __max__.bottom_guppy_shutter = 3843.0;
//#line 102 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __default__.bottom_guppy_shutter = 500.0;
//#line 102 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      bottom_guppy.abstract_parameters.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<double>("bottom_guppy_shutter", "double", 408, "Value for the shutter", "", &Camera_Parameters_Config::bottom_guppy_shutter)));
//#line 102 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __param_descriptions__.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<double>("bottom_guppy_shutter", "double", 408, "Value for the shutter", "", &Camera_Parameters_Config::bottom_guppy_shutter)));
//#line 104 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __min__.bottom_guppy_white_balance_auto = 0;
//#line 104 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __max__.bottom_guppy_white_balance_auto = 1;
//#line 104 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __default__.bottom_guppy_white_balance_auto = 1;
//#line 104 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      bottom_guppy.abstract_parameters.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<bool>("bottom_guppy_white_balance_auto", "bool", 410, "True = Manual , False = Auto", "", &Camera_Parameters_Config::bottom_guppy_white_balance_auto)));
//#line 104 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __param_descriptions__.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<bool>("bottom_guppy_white_balance_auto", "bool", 410, "True = Manual , False = Auto", "", &Camera_Parameters_Config::bottom_guppy_white_balance_auto)));
//#line 105 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __min__.bottom_guppy_white_balance_red = 0.0;
//#line 105 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __max__.bottom_guppy_white_balance_red = 511.0;
//#line 105 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __default__.bottom_guppy_white_balance_red = 568.0;
//#line 105 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      bottom_guppy.abstract_parameters.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<double>("bottom_guppy_white_balance_red", "double", 411, "Value for the red in the white balance", "", &Camera_Parameters_Config::bottom_guppy_white_balance_red)));
//#line 105 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __param_descriptions__.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<double>("bottom_guppy_white_balance_red", "double", 411, "Value for the red in the white balance", "", &Camera_Parameters_Config::bottom_guppy_white_balance_red)));
//#line 106 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __min__.bottom_guppy_white_balance_blue = 0.0;
//#line 106 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __max__.bottom_guppy_white_balance_blue = 511.0;
//#line 106 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __default__.bottom_guppy_white_balance_blue = 276.0;
//#line 106 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      bottom_guppy.abstract_parameters.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<double>("bottom_guppy_white_balance_blue", "double", 412, "Value for the blue in the white balance", "", &Camera_Parameters_Config::bottom_guppy_white_balance_blue)));
//#line 106 "/home/alexemdesgagne/Workspaces/ros_sonia_ws/src/provider_vision/cfg/Camera_Parameters_.cfg"
      __param_descriptions__.push_back(Camera_Parameters_Config::AbstractParamDescriptionConstPtr(new Camera_Parameters_Config::ParamDescription<double>("bottom_guppy_white_balance_blue", "double", 412, "Value for the blue in the white balance", "", &Camera_Parameters_Config::bottom_guppy_white_balance_blue)));
//#line 123 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      bottom_guppy.convertParams();
//#line 123 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      Default.groups.push_back(Camera_Parameters_Config::AbstractGroupDescriptionConstPtr(new Camera_Parameters_Config::GroupDescription<Camera_Parameters_Config::DEFAULT::BOTTOM_GUPPY, Camera_Parameters_Config::DEFAULT>(bottom_guppy)));
//#line 123 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __group_descriptions__.push_back(Camera_Parameters_Config::AbstractGroupDescriptionConstPtr(new Camera_Parameters_Config::GroupDescription<Camera_Parameters_Config::DEFAULT::BOTTOM_GUPPY, Camera_Parameters_Config::DEFAULT>(bottom_guppy)));
//#line 246 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      Default.convertParams();
//#line 246 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator.py"
      __group_descriptions__.push_back(Camera_Parameters_Config::AbstractGroupDescriptionConstPtr(new Camera_Parameters_Config::GroupDescription<Camera_Parameters_Config::DEFAULT, Camera_Parameters_Config>(Default)));
//#line 366 "/opt/ros/melodic/share/dynamic_reconfigure/templates/ConfigType.h.template"

      for (std::vector<Camera_Parameters_Config::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__);
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__);
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__);
    }
    std::vector<Camera_Parameters_Config::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<Camera_Parameters_Config::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    Camera_Parameters_Config __max__;
    Camera_Parameters_Config __min__;
    Camera_Parameters_Config __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const Camera_Parameters_ConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static Camera_Parameters_ConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &Camera_Parameters_Config::__getDescriptionMessage__()
  {
    return __get_statics__()->__description_message__;
  }

  inline const Camera_Parameters_Config &Camera_Parameters_Config::__getDefault__()
  {
    return __get_statics__()->__default__;
  }

  inline const Camera_Parameters_Config &Camera_Parameters_Config::__getMax__()
  {
    return __get_statics__()->__max__;
  }

  inline const Camera_Parameters_Config &Camera_Parameters_Config::__getMin__()
  {
    return __get_statics__()->__min__;
  }

  inline const std::vector<Camera_Parameters_Config::AbstractParamDescriptionConstPtr> &Camera_Parameters_Config::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<Camera_Parameters_Config::AbstractGroupDescriptionConstPtr> &Camera_Parameters_Config::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const Camera_Parameters_ConfigStatics *Camera_Parameters_Config::__get_statics__()
  {
    const static Camera_Parameters_ConfigStatics *statics;

    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = Camera_Parameters_ConfigStatics::get_instance();

    return statics;
  }


}

#undef DYNAMIC_RECONFIGURE_FINAL

#endif // __CAMERA_PARAMETERS_RECONFIGURATOR_H__
